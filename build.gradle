plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.itwillbs'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

bootJar{
	enabled = false
}

bootWar{
	enabled = true
	archiveBaseName = 'springboot'
	archiveVersion = '0.0.1-SNAPSHOT'
	mainClass = 'com.itwillbs.QTableApplication'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	
	implementation 'jakarta.activation:jakarta.activation-api:2.0.1'
	implementation 'com.sun.activation:jakarta.activation:2.0.1'
	
	// 내장 Tomcat 제거(외부 Tomcat 사용 시)
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	
 	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.3'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-aop'

	// WebSocket & STOMP
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	// querydsl 
	implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	
	// ZXING -> QR CODE 생성 라이브러리 
	implementation 'com.google.zxing:core:3.5.3'
    implementation 'com.google.zxing:javase:3.5.3'

}

// querydsl 설정 :querydsl 사용할때 생성되는 소스코드 관리하기 위한 설정
// build/generated/querydsl 폴더 생성

def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

// Java컴파일 시 사용되는 소스 디렉토리에 querydslDir을 추가
sourceSets{
	main{
		java{
		 	srcDirs += querydslDir
		}
	}
}

//Java 컴파일 작업에 대해 어노테이션 프로세서가 생성하는 소스파일의 출력 디렉토리를 querydslDir
tasks.withType(JavaCompile).configureEach{
	options.annotationProcessorGeneratedSourcesDirectory = querydslDir
}

// 생성된 QueryDSL 파일을 clean 시 삭제
clean{
	delete querydslDir
}


tasks.named('test') {
	useJUnitPlatform()
}

// Java 컴파일러 매개변수 이름 보존 설정
tasks.withType(JavaCompile) {
	options.compilerArgs += ['-parameters']
}
