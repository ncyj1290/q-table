<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.qtable.mapper.chat.chatMapper">
	<insert id="insertChatRoom">
		INSERT INTO chat_room (
			   room_type
			 , member_idx
			 , store_idx
	    ) VALUES (  
			   #{roomType}
			 , #{memberIdx}
			 , #{storeIdx}
		)
	</insert>

	<select id="getChatRoomByMemberAndStore" resultType="map">
		SELECT
			   room_idx
			 , room_type
			 , member_idx
			 , store_idx
		  FROM chat_room
		 WHERE member_idx = #{memberIdx}
		   AND store_idx = #{storeIdx}
		 LIMIT 1
	</select>
	
	<!-- 관리자 채팅방 존재 조회  -->
	<select id="getAdminChatRoomByMember" resultType="int">
		SELECT COUNT(*)
		  FROM chat_room
		 WHERE member_idx = #{memberIdx}
		   AND room_type = 'room_02'
	</select>

	<!-- 관리자 채팅방 조회 (room_idx 반환) -->
	<select id="getAdminChatRoom" resultType="map">
		SELECT room_idx
			 , room_type
			 , member_idx
			 , store_idx
		  FROM chat_room
		 WHERE member_idx = #{memberIdx}
		   AND room_type = 'room_02'
		 LIMIT 1
	</select>
	
	<!-- 사용자의 모든 채팅방 목록 조회 (상대방 정보 포함) -->
	<select id="getChatRoomListByMember" resultType="map">
		SELECT
			   cr.room_idx
			 , cr.room_type
			 , cr.member_idx
			 , COALESCE(cr.store_idx, 'null') AS store_idx
			 , s.store_name
			 , s.qr_code
			 , cr.updated_at
			 , CASE
			     -- 관리자 문의 채팅방
			     WHEN cr.room_type = 'room_02' AND cr.member_idx = #{memberIdx} THEN '관리자'
			     WHEN cr.room_type = 'room_02' AND cr.member_idx != #{memberIdx} THEN m.member_name
			     -- 매장 문의 채팅방
			     WHEN cr.member_idx = #{memberIdx} THEN s.store_name
			     ELSE m.member_name
			   END AS opposite_name
			 , m.member_name
			 , COALESCE(
		           CASE
		             WHEN cr.room_type = 'room_02' THEN NULL
		             ELSE m.member_idx
		           END,
		           '') AS opposite_member_idx
			 , CASE
			     -- 관리자 문의 채팅방
			     WHEN cr.room_type = 'room_02' AND cr.member_idx = #{memberIdx} THEN NULL
			     WHEN cr.room_type = 'room_02' AND cr.member_idx != #{memberIdx} THEN m.profile_img_url
			     -- 매장 문의 채팅방 (내가 생성한 채팅방 - 매장 주인의 프로필)
			     WHEN cr.room_type = 'room_01' AND cr.member_idx = #{memberIdx} THEN store_owner.profile_img_url
			     -- 매장 문의 채팅방 (내 매장으로 온 문의 - 고객의 프로필)
			     WHEN cr.room_type = 'room_01' AND cr.member_idx != #{memberIdx} THEN m.profile_img_url
			     ELSE NULL
			   END AS opposite_profile_img
		  FROM chat_room cr
		  LEFT JOIN store s ON cr.store_idx = s.store_idx
		  LEFT JOIN member m ON cr.member_idx = m.member_idx
		  LEFT JOIN member store_owner ON s.member_idx = store_owner.member_idx
		 WHERE
		   -- 1. 내가 생성한 채팅방 (room_01, room_02 모두)
		   (cr.member_idx = #{memberIdx})

		   -- 2. 내 매장으로 온 문의 (room_01만)
		   OR (cr.room_type = 'room_01'
		       AND cr.store_idx IN (SELECT store_idx FROM store WHERE member_idx = #{memberIdx}))

		   -- 3. 관리자는 모든 room_02를 봄
		   OR (cr.room_type = 'room_02'
		       AND #{memberIdx} IN (SELECT member_idx FROM member WHERE member_type = 'mtype_01'))
		 ORDER BY
		       CASE WHEN cr.room_type = 'room_02' THEN 0 ELSE 1 END,
		       cr.updated_at DESC
	</select>

	<!-- 특정 채팅방의 메시지 목록 조회 (발신자 정보 포함) -->
	<select id="getChatMessagesByRoomIdx" resultType="map">
		SELECT
			   c.chat_idx
			 , c.room_idx
			 , c.sender_idx
			 , c.message_content
			 , c.is_read
			 , c.created_at
			 , m.member_name AS sender_name
			 , m.profile_img_url AS sender_profile_img
		  FROM chat c
		  LEFT JOIN member m ON c.sender_idx = m.member_idx
		 WHERE c.room_idx = #{roomIdx}
		 ORDER BY c.created_at ASC
	</select>
	
	<!-- 마지막 대화 -->
	<select id="getLastMessage">
		SELECT
			   message_content
		  FROM chat
		 WHERE room_idx = #{chatRoomIdx}
	  ORDER BY created_at DESC
		 LIMIT 1
	</select>

	<!-- 메시지 저장 -->
	<insert id="insertChat">
		INSERT INTO chat (
			   room_idx
			 , sender_idx
			 , message_content
			 , is_read
		) VALUES (
			   #{roomIdx}
			 , #{senderIdx}
			 , #{messageContent}
			 , FALSE
		)
	</insert>
	
	
	<!-- 모든 채팅방별 읽지않은 메시지 수 조회 -->
	<select id="getUnreadCountByRoom" resultType="map">
		SELECT
			   c.room_idx
			 , COUNT(c.chat_idx) AS unread_count
		  FROM chat c
		 WHERE c.room_idx IN (
		 	   SELECT room_idx
		 	     FROM chat_room
		 	    WHERE
		 	      -- 1. 내가 생성한 채팅방
		 	      (member_idx = #{memberIdx})

		 	      -- 2. 내 매장으로 온 문의 (room_01만)
		 	      OR (room_type = 'room_01'
		 	          AND store_idx IN (SELECT store_idx FROM store WHERE member_idx = #{memberIdx}))

		 	      -- 3. 관리자는 모든 room_02를 봄
		 	      OR (room_type = 'room_02'
		 	          AND #{memberIdx} IN (SELECT member_idx FROM member WHERE member_type = 'mtype_01'))
		 )
		 AND c.is_read = FALSE
		 AND c.sender_idx != #{memberIdx}
	GROUP BY c.room_idx
	</select>
	
	<!-- 채팅방의 읽지 않은 메시지 모두 읽음으로 수정 -->
	<update id="updateMessagesAsRead">
		UPDATE chat
		   SET is_read = TRUE
		 WHERE room_idx = #{roomIdx}
		   AND is_read = FALSE
		   AND sender_idx != #{memberIdx}
	</update>

	<!-- 채팅방 updated_at 갱신 (메시지 전송 시 채팅방 목록 정렬용) -->
	<update id="updateChatRoomTimestamp">
		UPDATE chat_room
		   SET updated_at = CURRENT_TIMESTAMP
		 WHERE room_idx = #{roomIdx}
	</update>
</mapper>