<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.itwillbs.qtable.mapper.storeDetail.StoreDetailMapper">

	<!-- 매장 기본 정보 조회 -->
	<select id="getStoreBasicInfo" resultType="map">
		SELECT
		       s.store_idx
		     , s.member_idx
		     , s.store_name
		     , s.store_phone
		     , s.post_code
		     , s.full_address
		     , s.sido
		     , s.sigungu
		     , s.store_seat
		     , s.account_number
		     , s.deposit
		     , s.store_content
		     , s.price_avg
		     , s.qr_code
		     , s.is_accept
		     , s.is_24hour
		     , s.bank_code
		     , s.open_time
		     , s.close_time
		     , open_code.code_label AS open_time_label
		     , close_code.code_label AS close_time_label
		  FROM store s
     LEFT JOIN common_code open_code ON s.open_time = open_code.code
     LEFT JOIN common_code close_code ON s.close_time = close_code.code
		 WHERE s.store_idx = #{storeIdx}
	</select>
	
	<!-- 매장 프로필 이미지 조회 -->
	<select id="getStoreProfileImage" resultType="string">
		SELECT image_url
		  FROM image
		 WHERE target_idx = #{storeIdx}
		   AND target_type = 'imguse_01'
      ORDER BY is_main_image DESC, image_idx ASC
	</select>
	
	<!-- 매장 이미지 조회 -->
	<select id="getStoreImage" resultType="string">
		SELECT image_url
		  FROM image
		 WHERE target_idx = #{storeIdx}
		   AND target_type = 'imguse_02'
	  ORDER BY is_main_image DESC, image_idx ASC
	</select>

	<!-- 매장 카테고리 조회 -->
	<select id="getStoreCategories" resultType="string">
		SELECT cat_code.code_label
		  FROM store_category sc
		  JOIN common_code cat_code ON sc.store_category = cat_code.code
		 WHERE sc.store_idx = #{storeIdx}
	</select>
	
	<!-- 매장 휴일-->
	<select id="getStoreHoliday" resultType="string">
		SELECT cat_code.code_label
		  FROM store_holiday sc
		  JOIN common_code cat_code ON sc.store_holiday = cat_code.code
		 WHERE sc.store_idx = #{storeIdx}
	</select>

	<!-- 매장 분위기 조회 -->
	<select id="getStoreAtmosphere" resultType="string">
		SELECT atm_code.code_label
		  FROM store_atmosphere sa
		  JOIN common_code atm_code ON sa.store_atmosphere = atm_code.code
		 WHERE sa.store_idx = #{storeIdx}
	</select>

	<!-- 매장 편의시설 조회 -->
	<select id="getStoreAmenities" resultType="map">
		SELECT amenity_code.code AS amenityCode,
		       amenity_code.code_label AS amenityName
		  FROM store_amenity sa
		  JOIN common_code amenity_code ON sa.store_amenity = amenity_code.code
		 WHERE sa.store_idx = #{storeIdx}
	</select>
	
	
	<!-- 메뉴 조회 -->
	<select id="getMenu" resultType="map">
		SELECT
		       m.menu_idx
		     , m.store_idx
		     , m.menu_name
		     , m.price
		     , m.menu_content
		     , m.menu_gram
		     , i.image_url AS menu_image
		  FROM menu m
		  LEFT JOIN image i ON i.target_idx = m.menu_idx
		                   AND i.target_type = 'imguse_03'
		 WHERE m.store_idx = #{storeIdx}
		 <if test="offset != null and size != null">
		 LIMIT #{offset}, #{size}
		 </if>
	</select>
	
	<!-- 메뉴 개수 조회 -->
	<select id="getMenuCount" resultType="int">
		SELECT count(*)
		  FROM menu
		 WHERE store_idx = #{storeIdx}
	</select>
	
	<!-- 메뉴판 이미지 조회 -->
	<select id="getMenuBoardImages" resultType="string">
		SELECT image_url
		  FROM image
		 WHERE target_idx = #{storeIdx}
		   AND target_type = 'imguse_04'
	  ORDER BY is_main_image DESC, image_idx ASC 
	</select>
	
	<!-- 식자재 조회 -->
	<select id="getIngredients" resultType="map">
		SELECT
			   ingredients_name
			 , ingredients_origin
			 , allergy
		  FROM ingredients
		 WHERE store_idx = #{storeIdx}
	</select>
	
	<!-- 리뷰 별점 정보 조회 -->
	<select id="getReviewScoreInfo" resultType="map">
		SELECT
		       ROUND(AVG(score), 2) AS avgScore
		     , COUNT(*) AS reviewCount
		  FROM review
		 WHERE store_idx = #{storeIdx}
	</select>
	
	<!-- 리뷰 별점 분포 조회 -->
	<select id="getScoreDistribution" resultType="map">
		SELECT
		       scores.score
		     , COALESCE(COUNT(r.score), 0) AS count
		     , ROUND(COALESCE(COUNT(r.score), 0) * 100.0 /
		             GREATEST((SELECT COUNT(*) FROM review WHERE store_idx = #{storeIdx}), 1), 1) AS percent
		  FROM (
		       SELECT 5 AS score
		       UNION SELECT 4
		       UNION SELECT 3
		       UNION SELECT 2
		       UNION SELECT 1
		       ) scores
		  LEFT JOIN review r ON scores.score = r.score
		                    AND r.store_idx = #{storeIdx}
		 GROUP BY scores.score
		 ORDER BY scores.score DESC
	</select>
	
	<!-- 모든 시간 조회-->
	<select id="getAllTimeCodes" resultType="string">
		SELECT
			   code_label
		  FROM common_code
		 WHERE group_code = 'time'
		   AND code LIKE 'time%'
	  ORDER BY code
	</select>
	
	<!-- 예약가능 시간 조회 -->
	<select id="getTimeCodesBetween" resultType="string">
		SELECT
			   code_label
	      FROM common_code
	     WHERE group_code = 'time'
	       AND code LIKE 'time%'
	       AND code BETWEEN #{openTime} AND #{closeTime}
	  ORDER BY code
	</select>
	
	<!-- 리뷰 정렬 옵션 공통코드 조회 -->
	<select id="getReviewSortOptions" resultType="map">
		SELECT code
		     , code_label
		  FROM common_code
		 WHERE group_code = 'review_sort'
	  ORDER BY code_index
	</select>

	<!-- 리뷰 조회 (+ 정렬필터, 페이지네이션) -->
	<select id="getReview" resultType="map">
		SELECT
		       r.review_idx
		     , r.member_idx
		     , COALESCE(m.member_name, '탈퇴한 회원') AS member_name
		     , COALESCE(m.profile_img_url, '/img/profile_default.jpg') AS profile_img_url
		     , r.store_idx
		     , DATE(r.create_at) AS create_at
		     , r.content
		     , r.score
		     , COUNT(DISTINCT rl.review_like_idx) AS like_count
		     , <if test="memberIdx != null">
		        SUM(CASE WHEN rl.member_idx = #{memberIdx} THEN 1 ELSE 0 END) > 0 AS is_liked
		       </if>
		       <if test="memberIdx == null">
		        FALSE AS is_liked
		       </if>
		     , GROUP_CONCAT(DISTINCT i.image_url) AS images
		FROM review r
		LEFT JOIN member m ON m.member_idx = r.member_idx
		LEFT JOIN image i 
		       ON i.target_idx = r.review_idx
		      AND i.target_type = 'imguse_05'
		LEFT JOIN review_like rl 
		       ON rl.review_idx = r.review_idx
		WHERE r.store_idx = #{storeIdx}
		GROUP BY r.review_idx
	
		<if test="sortType == 'rvs_04'">
			HAVING images IS NOT NULL
		</if>
	
		<choose>
			<when test="sortType == 'rvs_02'">
				ORDER BY r.score DESC, r.create_at DESC
			</when>
			<when test="sortType == 'rvs_03'">
				ORDER BY r.score ASC, r.create_at DESC
			</when>
			<when test="sortType == 'rvs_05'">
				ORDER BY like_count DESC, r.create_at DESC
			</when>
			<otherwise>
				ORDER BY r.create_at DESC
			</otherwise>
		</choose>
	
		<if test="offset != null and size != null">
			LIMIT #{offset}, #{size}
		</if>
	</select>


	<!-- 리뷰 개수 조회 (정렬 타입별) -->
	<select id="getReviewCount" resultType="int">
		SELECT COUNT(DISTINCT r.review_idx)
		  FROM review r
		 WHERE r.store_idx = #{storeIdx}
		<if test="sortType == 'rvs_04'">
		   AND EXISTS (SELECT 1
		                 FROM image i
		                WHERE i.target_idx = r.review_idx
		                  AND i.target_type = 'imguse_05')
		</if>
	</select>
	
	<!-- 리뷰 작성 -->
	<insert id="insertReview" useGeneratedKeys="true" keyProperty="reviewIdx">
		INSERT INTO review(
				    member_idx
			      , store_idx
			      , score
			      , content					
			    ) VALUES (
				    #{memberIdx}			
				  , #{storeIdx}			
				  , #{score}			
				  , #{content}			
     			)
	</insert>
	
	<!-- 리뷰 이미지 저장 -->
	<insert id="insertReviewImages">
	    INSERT INTO image (
			        target_type
			      , target_idx
			      , image_url
			    ) VALUES
	    <foreach collection="imageList" item="img" separator=",">
	        ('imguse_05', #{reviewIdx}, #{img})
	    </foreach>
	</insert>
	
	<!-- 리뷰 좋아요 존재 여부 확인 -->
	<select id="checkReviewLikeExists" resultType="int">
		SELECT COUNT(*)
		  FROM review_like
		 WHERE review_idx = #{reviewIdx}
		   AND member_idx = #{memberIdx}
	</select>
	
	<!-- 리뷰 좋아요 삭제 -->
	<delete id="deleteReviewLike">
		DELETE FROM review_like
	     WHERE review_idx = #{reviewIdx}
	       AND member_idx = #{memberIdx} 
	</delete>
	
	<!-- 리뷰 좋아요 추가 -->
	<insert id="insertReviewLike">
		INSERT INTO review_like(
					review_idx	
				  , member_idx
				) VALUES (
				    #{reviewIdx}
				  , #{memberIdx}  
				)
	</insert>
	
	<!-- 리뷰 좋아요 개수 조회 -->
	<select id="getReviewLikeCount" resultType="int">
		SELECT COUNT(*)
		  FROM review_like
		 WHERE review_idx = #{reviewIdx}
	</select>
	
	<!-- 스크랩 존재 여부 확인 -->
	<select id="checkScrapExists" resultType="int">
		SELECT COUNT(*)
		  FROM scrap
		 WHERE store_idx = #{storeIdx}
		   AND member_idx = #{memberIdx}
	</select>
	
	<!-- 스크랩 추가 -->
	<insert id="insertScrap">
		INSERT INTO scrap(
				    member_idx
				  , store_idx
				) VALUES (	
					#{memberIdx}
				  , #{storeIdx}
				)
	</insert>
	
	<!-- 스크랩 삭제 -->
	<delete id="deleteScrap">
		DELETE FROM scrap
			  WHERE store_idx = #{storeIdx}
			  	AND member_idx = #{memberIdx} 
	</delete>
</mapper>